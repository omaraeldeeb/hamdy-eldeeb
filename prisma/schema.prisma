generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  nameAr             String   @default("")
  slug               String   @unique(map: "product_slug_idx")
  slugAr             String   @unique(map: "product_slug_ar_idx") @default("")
  categoryId         String   @db.Uuid
  brandId            String   @db.Uuid
  description        String
  descriptionAr      String   @default("")
  stock              Int
  price              Decimal  @default(0) @db.Decimal(12, 2)
  discount           Decimal? @db.Decimal(5, 2)
  rating             Decimal  @default(0) @db.Decimal(3, 2)
  numReviews         Int      @default(0)
  isFeatured         Boolean  @default(false)
  isLimitedTimeOffer Boolean  @default(false)
  isNewArrival       Boolean  @default(false)
  createdAt          DateTime @default(now()) @db.Timestamp(6)

  // Relationships
  category  Category    @relation(fields: [categoryId], references: [id])
  brand     Brand       @relation(fields: [brandId], references: [id])
  images    Image[]
  OrderItem OrderItem[]
  Review    Review[]

  // Indexes for performance
  @@index([categoryId])
  @@index([brandId])
  @@index([isFeatured])
  @@index([isLimitedTimeOffer])
  @@index([isNewArrival])
  @@index([discount])
}

model Image {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url       String
  alt       String?
  productId String   @db.Uuid
  type      String? // "main", "thumbnail", etc.
  position  Int? // For ordering images
  createdAt DateTime @default(now()) @db.Timestamp(6)

  // Relationships
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([productId])
}

model Category {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  nameAr        String   @default("")
  slug          String   @unique
  slugAr        String   @unique @default("")
  description   String?
  descriptionAr String?  @default("")
  image         String? // URL for the category image
  parentId      String?  @db.Uuid
  level         Int      @default(1) // 1=main, 2=sub, 3=sub-sub
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  // Relationships

  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children Category[] @relation("SubCategories")
  products Product[]

  // Indexes
  @@index([parentId])
  @@index([level])
}

model Brand {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @unique
  nameAr        String   @unique @default("")
  slug          String   @unique
  slugAr        String   @unique @default("")
  description   String?
  descriptionAr String?  @default("")
  logo          String? // URL for the logo image
  banner        String? // URL for the banner image
  createdAt     DateTime @default(now()) @db.Timestamp(6)

  // Relationships
  products Product[]

  // Indexes
  @@index([name])
  @@index([nameAr])
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  session       Session[]
  Cart          Cart[]
  Order         Order[]
  Review        Review[]

  // Index for faster login
  @@index([email, password])
  @@index([role])
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([expires])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@index([expires])
}

model Cart {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String?  @db.Uuid
  sessionCartId String
  items         Json[]   @default([]) @db.Json
  itemsPrice    Decimal  @db.Decimal(12, 2)
  totalPrice    Decimal  @db.Decimal(12, 2)
  shippingPrice Decimal  @db.Decimal(12, 2)
  taxPrice      Decimal  @db.Decimal(12, 2)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionCartId])
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String      @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paymentResult   Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  isDelivered     Boolean     @default(false)
  deliveredAt     DateTime?   @db.Timestamp(6)
  createdAt       DateTime    @default(now()) @db.Timestamp(6)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderitems      OrderItem[]

  @@index([userId])
  @@index([isPaid])
  @@index([isDelivered])
  @@index([createdAt])
}

model OrderItem {
  orderId   String  @db.Uuid
  productId String  @db.Uuid
  qty       Int
  price     Decimal @db.Decimal(12, 2)
  name      String
  slug      String
  image     String

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "orderitems_orderId_productId_pk")
  @@index([productId])
}

model Review {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String   @db.Uuid
  productId          String   @db.Uuid
  rating             Int
  title              String
  description        String
  isVerifiedPurchase Boolean  @default(true)
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([rating])
}

model Deal {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titleEn       String
  titleAr       String
  descriptionEn String
  descriptionAr String
  imageUrl      String
  targetDate    DateTime @db.Timestamp(6)
  startDate     DateTime @default(now()) @db.Timestamp(6)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt

  @@index([isActive])
  @@index([targetDate])
  @@index([startDate])
}
